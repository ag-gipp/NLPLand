name: Release
on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  Fulltests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Run linting
        run: |
          poetry run flake8 .
      - name: Run tests
        run: |
          poetry run py.test tests -s --cov=nlpland --cov-report=xml --cov-fail-under 97
      - name: Run typing
        run: |
          poetry run pyright nlpland
          
  Coverage:
    if: github.event.pull_request.merged == true
      needs: [Fulltests]
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - uses: actions/setup-python@v2
          with:
            python-version: 3.8
        - name: Install poetry
          uses: snok/install-poetry@v1
          with:
            virtualenvs-create: true
            virtualenvs-in-project: true
        - name: Load cached venv
          id: cached-poetry-dependencies
          uses: actions/cache@v2
          with:
            path: .venv
            key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
        - name: Install dependencies
          run: poetry install
          if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        - name: Run tests
        run: |
          poetry run py.test tests -s --cov=nlpland --cov-report=xml --cov-fail-under 97
        - name: Upload coverage report
          uses: codecov/codecov-action@v2
          with:
            token: ${{ secrets.CODECOV_TOKEN }}
            file: ./coverage.xml
  Release:
    if: github.event.pull_request.merged == true
    needs: [Fulltests]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: "0"
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Bump version and push tag
        uses: anothrNick/github-tag-action@1.36.0
        id: tagging
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          WITH_V: true
      - name: Build Changelog
        id: build_changelog
        uses: mikepenz/release-changelog-builder-action@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create Release
        uses: actions/create-release@v1
        with:
          release_name: ${{steps.tagging.outputs.tag}}
          body: ${{steps.build_changelog.outputs.changelog}}
          tag_name: ${{steps.tagging.outputs.tag}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  Docs:
    name: Push docs to release Branch
    needs: [Fulltests]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v2
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ hashFiles('**/poetry.lock') }}
      - name: Install dependencies
        run: poetry install
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      - name: Generate docs
        run: |
          poetry run pdoc --output-dir docs --html nlpland
      - name: Deploy docs ðŸš€
        uses: JamesIves/github-pages-deploy-action@4.0.0
        with:
          branch: docs
          folder: ./docs/nlpland
